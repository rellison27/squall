import java.lang.Boolean;

CREATE TABLE  people_Entity(
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    first_name TEXT,
    last_name TEXT,
    nick_name TEXT,
    maiden_name TEXT,
    middle_name TEXT,
    profile_picture TEXT,
    archived INTEGER AS Boolean,
    birthdate INTEGER,
    email TEXT,
    FOREIGN KEY (id) REFERENCES person_Phone(person_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (id) REFERENCES person_Address(person_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  person_Phone(
    person_id INTEGER NOT NULL PRIMARY KEY,
    home TEXT,
    mobile TEXT,
    work TEXT,
    home_is_private INTEGER AS Boolean,
    mobile_is_private INTEGER AS Boolean,
    work_is_private INTEGER AS Boolean,
    FOREIGN KEY (person_id) REFERENCES people_Entity(id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE  person_Address(
    person_id INTEGER NOT NULL PRIMARY KEY,
    street TEXT,
    city TEXT,
    state TEXT,
    zip TEXT,
    longitude TEXT,
    latitude TEXT,
    private INTEGER AS Boolean,
    FOREIGN KEY (person_id) REFERENCES people_Entity(id) ON DELETE CASCADE ON UPDATE CASCADE
);

selectAll:
SELECT *
FROM people_Entity;

insertPerson:
INSERT OR REPLACE
INTO people_Entity (
    id,
    first_name,
    last_name,
    nick_name,
    maiden_name,
    middle_name,
    profile_picture,
    archived,
    birthdate,
    email
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

insertPersonPhone:
INSERT OR REPLACE
INTO person_Phone (
    person_id,
    home,
    mobile,
    work,
    home_is_private,
    mobile_is_private,
    work_is_private
) VALUES (?, ?, ?, ?,?,?,?);

insertPersonAddress:
INSERT OR REPLACE
INTO person_Address (
    person_id,
    street,
    city,
    state,
    zip,
    longitude,
    latitude,
    private
) VALUES (?, ?, ?, ?, ?, ?, ?, ?);

-- IF we implement a search later down the road
-- -- searchPeople:
-- -- SELECT * FROM peole_Entity
-- -- INNER JOIN person_Phone ON people_Entity.id = person_Phone.person_id
-- -- WHERE name LIKE ('%' || :query || '%')
-- -- OR email LIKE ('%' || :query || '%')
-- -- OR mobile LIKE ('%' || :query || '%')
-- -- LIMIT :pageSize
-- -- OFFSET :offset;
--

getAllPeople:
SELECT * FROM people_Entity
INNER JOIN person_Phone ON people_Entity.id = person_Phone.person_id
INNER JOIN person_Address ON people_Entity.id = person_Address.person_id;
-- LIMIT :pageSize
-- OFFSET :offset;
--

getPersonById:
SELECT * FROM people_Entity
INNER JOIN person_Phone ON people_Entity.id = person_Phone.person_id
INNER JOIN person_Address ON people_Entity.id = person_Address.person_id
WHERE id = :id;